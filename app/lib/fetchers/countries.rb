module Fetchers
  class Countries < Fetcher

    FILE_PATH = Rails.root.join("config", "data", "countries.json").freeze

    attr_reader :json_data

    def call run_local = false
      @json_data = if run_local
        JSON.parse(File.read(FILE_PATH))
      else
        countries.map do |country|
          restcountries_data(country)
        end
      end
      save_json_data_to_config FILE_PATH
      create_capitals
      create_flags
    end

    private

    def create_capitals
      json_data.each do |country|
        title = "Capitala statului #{country['name']} este.."
        next if Question.find_by(title: title)
        Question.create!({
          title: title,
          category: :capitals,
          answer: country['capital'],
          autogenerated: true,
          incorrect_answers: find_incorrect_answers('capital', country['capital'])
        })
      end
    end

    def create_flags
      json_data.each do |country|
        next if Question.find_by(url: country['flag'])
        Question.create!({
          title: "Ce tara este reprezentata de acest steag?",
          category: :flags,
          answer: country['name'],
          url: country['flag'],
          autogenerated: true,
          incorrect_answers: find_incorrect_answers('name', country['name'])
        })
      end
    end

    def restcountries_data country
      uri = URI("http://restcountries.eu/rest/v2/name/#{URI.escape(country)}")
      response = Net::HTTP.get(uri)
      json_response = JSON.parse(response).first
      if json_response == ["status", 404]
        binding.pry
      else
        selected_fields = json_response.with_indifferent_access.slice(:capital, :flag, :name)
        selected_fields[:name] = country
        if country.include?("Korea")
          selected_fields[:name] = "South Korea"
        elsif country.include?("Moldova")
          selected_fields[:name] = "Republica Moldova"
        end
        selected_fields
      end
    end

    def countries
      COUNTRIES.split(",").map(&:strip)
    end

    COUNTRIES = <<~EOF
      Luxembourg,Switzerland,Norway,Iceland,Ireland,Qatar,United States of America,Denmark,Australia,Singapore,Sweden,San Marino,
      Netherlands,Austria,Finland,Hong Kong,Canada,Germany,Belgium,New Zealand,Israel,France,United Kingdom,Japan,
      United Arab Emirates,Italy,Puerto Rico,Korea (Republic of),Spain,Brunei,Malta,Kuwait,Bahrain,Cyprus,Bahamas,Taiwan,Slovenia,
      Saudi Arabia,Portugal,Czech Republic,Estonia,Greece,Palau,Slovakia,Oman,Uruguay,Barbados,Lithuania,Seychelles,Latvia,
      Trinidad and Tobago,Panama,Chile,Argentina,Hungary,Poland,Croatia,Maldives,Equatorial Guinea,Costa Rica,Lebanon,Turkey,
      Romania,Grenada,Russia,Brazil,Saint Lucia,Mauritius,Malaysia,Mexico,Dominica,Kazakhstan,China,Nauru,Bulgaria,
      Botswana,Gabon,Turkmenistan,Dominican Republic,Montenegro,Venezuela,Peru,Suriname,Thailand,Colombia,South Africa,Ecuador,
      Fiji,Jordan,Serbia,Belarus,Macedonia,Namibia,Iran,Libya,Bosnia and Herzegovina,Morocco,Vietnam,Ukraine,Moldova
    EOF
  end
end

